# -*- coding: utf-8 -*-
"""model_resunet_jn

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oQ70hjt_QxWPlmpBS4wCDDsxpMa2BQ4a
"""

import tensorflow as tf
from tensorflow.keras import layers, Model

def conv_block(x, filters, kernel_size=(3, 3), padding="same", strides=1):
    res = layers.Conv2D(filters, kernel_size, padding=padding, strides=strides)(x)
    res = layers.BatchNormalization()(res)
    res = layers.Activation("relu")(res)

    res = layers.Conv2D(filters, kernel_size, padding=padding, strides=1)(res)
    res = layers.BatchNormalization()(res)

    shortcut = layers.Conv2D(filters, (1, 1), padding=padding, strides=strides)(x)
    shortcut = layers.BatchNormalization()(shortcut)

    output = layers.Add()([shortcut, res])
    output = layers.Activation("relu")(output)
    return output

def decoder_block(x, skip_features, filters):
    x = layers.Conv2DTranspose(filters, (2, 2), strides=2, padding="same")(x)
    x = layers.Concatenate()([x, skip_features])
    x = conv_block(x, filters)
    return x

def build_unet(input_shape):
    inputs = layers.Input(input_shape)

    # Encoder
    x1 = conv_block(inputs, 64)
    p1 = layers.MaxPooling2D((2, 2))(x1)

    x2 = conv_block(p1, 128)
    p2 = layers.MaxPooling2D((2, 2))(x2)

    x3 = conv_block(p2, 256)
    p3 = layers.MaxPooling2D((2, 2))(x3)

    x4 = conv_block(p3, 512)
    p4 = layers.MaxPooling2D((2, 2))(x4)

    x5 = conv_block(p4, 1024)
    p5 = layers.MaxPooling2D((2, 2))(x5)

    # Bridge
    b1 = conv_block(p5, 2048)

    # Decoder
    d1 = decoder_block(b1, x5, 1024)
    d2 = decoder_block(d1, x4, 512)
    d3 = decoder_block(d2, x3, 256)
    d4 = decoder_block(d3, x2, 128)
    d5 = decoder_block(d4, x1, 64)

    # Output
    outputs = layers.Conv2D(1, (1, 1), padding="same", activation="sigmoid")(d5)

    model = Model(inputs, outputs, name="ResUNet")
    return model